/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EditionsStructs {
  export type EditionIdWithAmountStruct = { id: string; amount: BigNumberish };

  export type EditionIdWithAmountStructOutput = [id: string, amount: bigint] & {
    id: string;
    amount: bigint;
  };

  export type EditionStruct = {
    status: BigNumberish;
    fee: BigNumberish;
    balance: BigNumberish;
    owner: AddressLike;
    id: string;
    briefId: string;
  };

  export type EditionStructOutput = [
    status: bigint,
    fee: bigint,
    balance: bigint,
    owner: string,
    id: string,
    briefId: string
  ] & {
    status: bigint;
    fee: bigint;
    balance: bigint;
    owner: string;
    id: string;
    briefId: string;
  };
}

export interface IEditionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveEdition"
      | "believeProject"
      | "createEdition"
      | "getBalances"
      | "getEditions"
      | "mintEdition"
      | "removeBelief"
      | "resumeEdition"
      | "stopEdition"
      | "updateEdition"
      | "withdrawEditionBalance"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EditionApproved"
      | "EditionBalanceWithdrawn"
      | "EditionBeliefRemoved"
      | "EditionBelieved"
      | "EditionCreated"
      | "EditionResumed"
      | "EditionStopped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "believeProject",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEdition",
    values: [BigNumberish, AddressLike, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintEdition",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBelief",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEdition",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEditionBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "believeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBelief",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEditionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace EditionApprovedEvent {
  export type InputTuple = [editionId: BigNumberish];
  export type OutputTuple = [editionId: bigint];
  export interface OutputObject {
    editionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionBalanceWithdrawnEvent {
  export type InputTuple = [
    editionId: BigNumberish,
    amount: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [editionId: bigint, amount: bigint, owner: string];
  export interface OutputObject {
    editionId: bigint;
    amount: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionBeliefRemovedEvent {
  export type InputTuple = [editionId: BigNumberish, believer: AddressLike];
  export type OutputTuple = [editionId: bigint, believer: string];
  export interface OutputObject {
    editionId: bigint;
    believer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionBelievedEvent {
  export type InputTuple = [
    editionId: BigNumberish,
    believer: AddressLike,
    tags: string
  ];
  export type OutputTuple = [editionId: bigint, believer: string, tags: string];
  export interface OutputObject {
    editionId: bigint;
    believer: string;
    tags: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionCreatedEvent {
  export type InputTuple = [
    editionId: BigNumberish,
    briefId: string,
    fee: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    editionId: bigint,
    briefId: string,
    fee: bigint,
    owner: string
  ];
  export interface OutputObject {
    editionId: bigint;
    briefId: string;
    fee: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionResumedEvent {
  export type InputTuple = [editionId: BigNumberish];
  export type OutputTuple = [editionId: bigint];
  export interface OutputObject {
    editionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditionStoppedEvent {
  export type InputTuple = [editionId: BigNumberish];
  export type OutputTuple = [editionId: bigint];
  export interface OutputObject {
    editionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEditions extends BaseContract {
  connect(runner?: ContractRunner | null): IEditions;
  waitForDeployment(): Promise<this>;

  interface: IEditionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveEdition: TypedContractMethod<
    [editionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  believeProject: TypedContractMethod<
    [editionId: BigNumberish, tags: string],
    [void],
    "nonpayable"
  >;

  createEdition: TypedContractMethod<
    [
      fee: BigNumberish,
      owner: AddressLike,
      payer: AddressLike,
      id: string,
      briefId: string
    ],
    [bigint],
    "nonpayable"
  >;

  getBalances: TypedContractMethod<
    [owner: AddressLike],
    [EditionsStructs.EditionIdWithAmountStructOutput[]],
    "view"
  >;

  getEditions: TypedContractMethod<
    [],
    [EditionsStructs.EditionStructOutput[]],
    "view"
  >;

  mintEdition: TypedContractMethod<
    [
      editionId: BigNumberish,
      amount: BigNumberish,
      buyer: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;

  removeBelief: TypedContractMethod<
    [editionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resumeEdition: TypedContractMethod<
    [editionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  stopEdition: TypedContractMethod<
    [editionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEdition: TypedContractMethod<
    [editionId: BigNumberish, id: string, briefId: string],
    [void],
    "nonpayable"
  >;

  withdrawEditionBalance: TypedContractMethod<
    [editionId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveEdition"
  ): TypedContractMethod<[editionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "believeProject"
  ): TypedContractMethod<
    [editionId: BigNumberish, tags: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEdition"
  ): TypedContractMethod<
    [
      fee: BigNumberish,
      owner: AddressLike,
      payer: AddressLike,
      id: string,
      briefId: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [owner: AddressLike],
    [EditionsStructs.EditionIdWithAmountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEditions"
  ): TypedContractMethod<[], [EditionsStructs.EditionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "mintEdition"
  ): TypedContractMethod<
    [
      editionId: BigNumberish,
      amount: BigNumberish,
      buyer: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeBelief"
  ): TypedContractMethod<[editionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeEdition"
  ): TypedContractMethod<[editionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopEdition"
  ): TypedContractMethod<[editionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEdition"
  ): TypedContractMethod<
    [editionId: BigNumberish, id: string, briefId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawEditionBalance"
  ): TypedContractMethod<
    [editionId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EditionApproved"
  ): TypedContractEvent<
    EditionApprovedEvent.InputTuple,
    EditionApprovedEvent.OutputTuple,
    EditionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "EditionBalanceWithdrawn"
  ): TypedContractEvent<
    EditionBalanceWithdrawnEvent.InputTuple,
    EditionBalanceWithdrawnEvent.OutputTuple,
    EditionBalanceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "EditionBeliefRemoved"
  ): TypedContractEvent<
    EditionBeliefRemovedEvent.InputTuple,
    EditionBeliefRemovedEvent.OutputTuple,
    EditionBeliefRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EditionBelieved"
  ): TypedContractEvent<
    EditionBelievedEvent.InputTuple,
    EditionBelievedEvent.OutputTuple,
    EditionBelievedEvent.OutputObject
  >;
  getEvent(
    key: "EditionCreated"
  ): TypedContractEvent<
    EditionCreatedEvent.InputTuple,
    EditionCreatedEvent.OutputTuple,
    EditionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EditionResumed"
  ): TypedContractEvent<
    EditionResumedEvent.InputTuple,
    EditionResumedEvent.OutputTuple,
    EditionResumedEvent.OutputObject
  >;
  getEvent(
    key: "EditionStopped"
  ): TypedContractEvent<
    EditionStoppedEvent.InputTuple,
    EditionStoppedEvent.OutputTuple,
    EditionStoppedEvent.OutputObject
  >;

  filters: {
    "EditionApproved(uint256)": TypedContractEvent<
      EditionApprovedEvent.InputTuple,
      EditionApprovedEvent.OutputTuple,
      EditionApprovedEvent.OutputObject
    >;
    EditionApproved: TypedContractEvent<
      EditionApprovedEvent.InputTuple,
      EditionApprovedEvent.OutputTuple,
      EditionApprovedEvent.OutputObject
    >;

    "EditionBalanceWithdrawn(uint256,uint256,address)": TypedContractEvent<
      EditionBalanceWithdrawnEvent.InputTuple,
      EditionBalanceWithdrawnEvent.OutputTuple,
      EditionBalanceWithdrawnEvent.OutputObject
    >;
    EditionBalanceWithdrawn: TypedContractEvent<
      EditionBalanceWithdrawnEvent.InputTuple,
      EditionBalanceWithdrawnEvent.OutputTuple,
      EditionBalanceWithdrawnEvent.OutputObject
    >;

    "EditionBeliefRemoved(uint256,address)": TypedContractEvent<
      EditionBeliefRemovedEvent.InputTuple,
      EditionBeliefRemovedEvent.OutputTuple,
      EditionBeliefRemovedEvent.OutputObject
    >;
    EditionBeliefRemoved: TypedContractEvent<
      EditionBeliefRemovedEvent.InputTuple,
      EditionBeliefRemovedEvent.OutputTuple,
      EditionBeliefRemovedEvent.OutputObject
    >;

    "EditionBelieved(uint256,address,string)": TypedContractEvent<
      EditionBelievedEvent.InputTuple,
      EditionBelievedEvent.OutputTuple,
      EditionBelievedEvent.OutputObject
    >;
    EditionBelieved: TypedContractEvent<
      EditionBelievedEvent.InputTuple,
      EditionBelievedEvent.OutputTuple,
      EditionBelievedEvent.OutputObject
    >;

    "EditionCreated(uint256,string,uint256,address)": TypedContractEvent<
      EditionCreatedEvent.InputTuple,
      EditionCreatedEvent.OutputTuple,
      EditionCreatedEvent.OutputObject
    >;
    EditionCreated: TypedContractEvent<
      EditionCreatedEvent.InputTuple,
      EditionCreatedEvent.OutputTuple,
      EditionCreatedEvent.OutputObject
    >;

    "EditionResumed(uint256)": TypedContractEvent<
      EditionResumedEvent.InputTuple,
      EditionResumedEvent.OutputTuple,
      EditionResumedEvent.OutputObject
    >;
    EditionResumed: TypedContractEvent<
      EditionResumedEvent.InputTuple,
      EditionResumedEvent.OutputTuple,
      EditionResumedEvent.OutputObject
    >;

    "EditionStopped(uint256)": TypedContractEvent<
      EditionStoppedEvent.InputTuple,
      EditionStoppedEvent.OutputTuple,
      EditionStoppedEvent.OutputObject
    >;
    EditionStopped: TypedContractEvent<
      EditionStoppedEvent.InputTuple,
      EditionStoppedEvent.OutputTuple,
      EditionStoppedEvent.OutputObject
    >;
  };
}
